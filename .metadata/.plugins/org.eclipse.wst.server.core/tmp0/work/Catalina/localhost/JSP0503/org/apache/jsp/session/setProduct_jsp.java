/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-05-03 08:50:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.session;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class setProduct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>setProduct page</title>\r\n");
      out.write("<style>\r\n");
      out.write("@font-face{\r\n");
      out.write("font-family:'DNFBitBitv2';\r\n");
      out.write("font-style:normal;font-weight:400;src:url('//cdn.df.nexon.com/img/common/font/DNFBitBitv2.otf')format('opentype')}\r\n");
      out.write("\r\n");
      out.write("*{\r\n");
      out.write("font-family: 'DNFBitBitv2'}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	background-color : #008BC6;\r\n");
      out.write("}\r\n");
      out.write(".main-container {\r\n");
      out.write("	background-color: white;\r\n");
      out.write("	width: 700px;\r\n");
      out.write("	height: 500px;\r\n");
      out.write("	border-radius: 20px;\r\n");
      out.write("}\r\n");
      out.write(".fruits-container {\r\n");
      out.write("\r\n");
      out.write("display: flex;\r\n");
      out.write("align-items: center;\r\n");
      out.write("justify-content: center;\r\n");
      out.write("}\r\n");
      out.write(".fruits {\r\n");
      out.write("\r\n");
      out.write("width: 400px;\r\n");
      out.write("margin: 0 auto;\r\n");
      out.write("border : 1px solid black;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"main-container\">\r\n");
      out.write("	<h2 align=\"center\">Choose items</h2>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div align=\"center\">\r\n");
      out.write("	");
request.setCharacterEncoding("UTF-8");
	
		String username1 = request.getParameter("name");
		if(username1 != null) {
			session.setAttribute("username", username1);
		}
		
		HashMap<String, Integer> map = (HashMap<String, Integer>) session.getAttribute("itemMap");
			if (map==null){
				map = new HashMap<String, Integer>();
			}
			session.setAttribute("itemMap", map);
	
      out.write('\r');
      out.write('\n');
      out.write('	');
 if (username1==""){ 
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		alert(\"아이디를 입력하고 로그인해주세요.\");\r\n");
      out.write("		history.back();\r\n");
      out.write("	</script>\r\n");
      out.write("	");
 }else if(session.getAttribute("username") == null){
		response.sendRedirect("login.jsp");
	}else{
      out.write("\r\n");
      out.write("	- Gamja Market shop - <br>\r\n");
      out.write("\r\n");
      out.write("	");
      out.print( session.getAttribute("username"));
      out.write("님의 로그인 페이지입니다. <br>\r\n");
      out.write("	구매를 원하는 품목을 선택해주세요.\r\n");
      out.write("	");
} 
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<div align=\"right\">\r\n");
      out.write("		<form action=\"logOut.jsp\">\r\n");
      out.write("			<input type=\"submit\" value=\"로그아웃\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div class=\"fruits-container\">\r\n");
      out.write("		<div class=\"fruits\">\r\n");
      out.write("		<form name = \"form1\" method=\"post\" action=\"add.jsp\">\r\n");
      out.write("			<table>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td><input type=\"hidden\" name=\"apple\" value=\"사과\">🍎사과</td>\r\n");
      out.write("					<td><button type=\"button\" onclick=\"modifyQuantity('apple_num', -1)\">-</button>\r\n");
      out.write("					<td><input type=\"number\" name=\"apple_num\" id=\"apple_num\" value= ");
      out.print( map.get("사과") );
      out.write("></td>\r\n");
      out.write("					<td><button type=\"button\" onclick=\"modifyQuantity('apple_num', 1)\">+</button>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td><input type=\"hidden\" name=\"peer\" value=\"배\">🍐배</td>\r\n");
      out.write("					<td><button type=\"button\" onclick=\"modifyQuantity('peer_num', -1)\">-</button>\r\n");
      out.write("					<td><input type=\"number\" name=\"peer_num\" id=\"peer_num\" value= ");
      out.print( map.get("배") );
      out.write("></td>\r\n");
      out.write("					<td><button type=\"button\" onclick=\"modifyQuantity('peer_num', 1)\">+</button>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td><input type=\"hidden\" name=\"mandarin\" value=\"귤\">🍊귤</td>\r\n");
      out.write("					<td><button type=\"button\" onclick=\"modifyQuantity('mandarin_num', -1)\">-</button>\r\n");
      out.write("					<td><input type=\"number\" name=\"mandarin_num\" id=\"mandarin_num\" value=");
      out.print( map.get("귤") );
      out.write("></td>\r\n");
      out.write("					<td><button type=\"button\" onclick=\"modifyQuantity('mandarin_num', 1)\">+</button>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\" align=\"center\"><input type=submit align=\"center\" value=담기></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("		</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<script>\r\n");
      out.write("		function modifyQuantity(item, change) {\r\n");
      out.write("			var input = document.getElementById(item);\r\n");
      out.write("			var currentValue = parseInt(input.value);\r\n");
      out.write("			if (currentValue + change >= 0) {\r\n");
      out.write("				input.value = currentValue + change;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		</script>\r\n");
      out.write("		</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
